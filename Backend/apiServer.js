/**
 * Argus Defense API Server
 * Serves OpenMHz stream data to the frontend
 */

const express = require('express');
const cors = require('cors');
const fs = require('fs').promises;
const path = require('path');

const app = express();
const PORT = process.env.API_PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json());

// In-memory tracking of active listeners
const activeListeners = new Map();

/**
 * Load streams data from the JSON file generated by ingest_openmhz.py
 */
async function loadStreamsData() {
  try {
    const dataPath = path.join(__dirname, 'openmhz/streams.json');
    const data = await fs.readFile(dataPath, 'utf-8');
    return JSON.parse(data);
  } catch (error) {
    console.error('Error loading streams data:', error);
    return null;
  }
}

/**
 * GET /api/streams
 * Returns the list of all available streams with metadata and wallet addresses
 */
app.get('/api/streams', async (req, res) => {
  try {
    const data = await loadStreamsData();

    if (!data) {
      return res.status(500).json({
        error: 'Failed to load streams data'
      });
    }

    // Flatten all streams from all systems
    const allStreams = [];

    for (const [systemKey, systemData] of Object.entries(data)) {
      if (systemKey === 'last_updated') continue;

      if (systemData.streams && Array.isArray(systemData.streams)) {
        // Add listener count from activeListeners
        const enrichedStreams = systemData.streams.map(stream => ({
          ...stream,
          active_listeners: activeListeners.get(stream.stream_id) || 0,
          system_info: {
            system_id: systemData.system_id,
            total_streams: systemData.total_streams,
            total_talkgroups: systemData.total_talkgroups
          }
        }));

        allStreams.push(...enrichedStreams);
      }
    }

    res.json({
      total_streams: allStreams.length,
      last_updated: data.last_updated,
      streams: allStreams
    });
  } catch (error) {
    console.error('Error in /api/streams:', error);
    res.status(500).json({
      error: 'Internal server error',
      message: error.message
    });
  }
});

/**
 * GET /api/streams/:systemId
 * Returns streams for a specific system
 */
app.get('/api/streams/:systemId', async (req, res) => {
  try {
    const { systemId } = req.params;
    const data = await loadStreamsData();

    if (!data) {
      return res.status(500).json({
        error: 'Failed to load streams data'
      });
    }

    const systemData = data[systemId];

    if (!systemData) {
      return res.status(404).json({
        error: 'System not found',
        systemId
      });
    }

    // Add listener count from activeListeners
    const enrichedStreams = systemData.streams.map(stream => ({
      ...stream,
      active_listeners: activeListeners.get(stream.stream_id) || 0
    }));

    res.json({
      system_id: systemData.system_id,
      total_streams: systemData.total_streams,
      total_talkgroups: systemData.total_talkgroups,
      talkgroups: systemData.talkgroups,
      streams: enrichedStreams,
      generated_at: systemData.generated_at
    });
  } catch (error) {
    console.error(`Error in /api/streams/${req.params.systemId}:`, error);
    res.status(500).json({
      error: 'Internal server error',
      message: error.message
    });
  }
});

/**
 * GET /api/stream/:streamId
 * Returns details for a specific stream
 */
app.get('/api/stream/:streamId', async (req, res) => {
  try {
    const { streamId } = req.params;
    const data = await loadStreamsData();

    if (!data) {
      return res.status(500).json({
        error: 'Failed to load streams data'
      });
    }

    // Search for the stream across all systems
    let foundStream = null;
    let foundSystem = null;

    for (const [systemKey, systemData] of Object.entries(data)) {
      if (systemKey === 'last_updated') continue;

      if (systemData.streams && Array.isArray(systemData.streams)) {
        foundStream = systemData.streams.find(s => s.stream_id === streamId);
        if (foundStream) {
          foundSystem = systemData;
          break;
        }
      }
    }

    if (!foundStream) {
      return res.status(404).json({
        error: 'Stream not found',
        streamId
      });
    }

    res.json({
      ...foundStream,
      active_listeners: activeListeners.get(streamId) || 0,
      system_info: {
        system_id: foundSystem.system_id,
        total_streams: foundSystem.total_streams,
        total_talkgroups: foundSystem.total_talkgroups
      }
    });
  } catch (error) {
    console.error(`Error in /api/stream/${req.params.streamId}:`, error);
    res.status(500).json({
      error: 'Internal server error',
      message: error.message
    });
  }
});

/**
 * POST /api/listen/start
 * Start tracking a listener for a stream
 */
app.post('/api/listen/start', (req, res) => {
  try {
    const { streamId, listenerId } = req.body;

    if (!streamId) {
      return res.status(400).json({
        error: 'streamId is required'
      });
    }

    const currentCount = activeListeners.get(streamId) || 0;
    activeListeners.set(streamId, currentCount + 1);

    console.log(`Listener started for stream ${streamId}. Total listeners: ${currentCount + 1}`);

    res.json({
      success: true,
      streamId,
      listenerId: listenerId || 'anonymous',
      active_listeners: currentCount + 1
    });
  } catch (error) {
    console.error('Error in /api/listen/start:', error);
    res.status(500).json({
      error: 'Internal server error',
      message: error.message
    });
  }
});

/**
 * POST /api/listen/stop
 * Stop tracking a listener for a stream
 */
app.post('/api/listen/stop', (req, res) => {
  try {
    const { streamId, listenerId } = req.body;

    if (!streamId) {
      return res.status(400).json({
        error: 'streamId is required'
      });
    }

    const currentCount = activeListeners.get(streamId) || 0;
    const newCount = Math.max(0, currentCount - 1);

    if (newCount === 0) {
      activeListeners.delete(streamId);
    } else {
      activeListeners.set(streamId, newCount);
    }

    console.log(`Listener stopped for stream ${streamId}. Total listeners: ${newCount}`);

    res.json({
      success: true,
      streamId,
      listenerId: listenerId || 'anonymous',
      active_listeners: newCount
    });
  } catch (error) {
    console.error('Error in /api/listen/stop:', error);
    res.status(500).json({
      error: 'Internal server error',
      message: error.message
    });
  }
});

/**
 * GET /api/systems
 * Returns the list of available systems
 */
app.get('/api/systems', async (req, res) => {
  try {
    const data = await loadStreamsData();

    if (!data) {
      return res.status(500).json({
        error: 'Failed to load streams data'
      });
    }

    const systems = [];

    for (const [systemKey, systemData] of Object.entries(data)) {
      if (systemKey === 'last_updated') continue;

      systems.push({
        system_id: systemData.system_id,
        total_streams: systemData.total_streams,
        total_talkgroups: systemData.total_talkgroups
      });
    }

    res.json({
      total_systems: systems.length,
      systems
    });
  } catch (error) {
    console.error('Error in /api/systems:', error);
    res.status(500).json({
      error: 'Internal server error',
      message: error.message
    });
  }
});

/**
 * Health check endpoint
 */
app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    active_streams: activeListeners.size
  });
});

// Start the server
app.listen(PORT, () => {
  console.log(`\nðŸš€ Argus Defense API Server running on http://localhost:${PORT}`);
  console.log('\nAvailable endpoints:');
  console.log(`  GET  http://localhost:${PORT}/api/streams`);
  console.log(`  GET  http://localhost:${PORT}/api/streams/:systemId`);
  console.log(`  GET  http://localhost:${PORT}/api/stream/:streamId`);
  console.log(`  GET  http://localhost:${PORT}/api/systems`);
  console.log(`  POST http://localhost:${PORT}/api/listen/start`);
  console.log(`  POST http://localhost:${PORT}/api/listen/stop`);
  console.log(`  GET  http://localhost:${PORT}/health`);
  console.log('\n');
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\n\nShutting down API server...');
  process.exit(0);
});
